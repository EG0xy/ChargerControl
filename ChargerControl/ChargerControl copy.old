//
//  ChargerControl.pde
//  Sketch 
//  ----------------------------------
//  Developed with embedXcode
//
//  Project ChargerControl
//  Created by corbin dunn on 5/18/12 
//  Copyright (c) 2012 __MyCompanyName__
//

// Core library
#include  "Arduino.h" // â€” for Arduino 1.0

/*********************
 
 Example code for the Adafruit RGB Character LCD Shield and Library
 
 This code displays text on the shield, and also reads the buttons on the keypad.
 When a button is pressed, the backlight changes color.
 
 **********************/

// include the library code:
#include <Wire.h>
#include <Adafruit_MCP23017.h>
#include <Adafruit_RGBLCDShield.h>

#include "LCDDatePicker.h"
#include "RTClib.h"


#include <Time.h>  

#define TIME_MSG_LEN  11   // time sync to PC is HEADER followed by unix time_t as ten ascii digits
#define TIME_HEADER  'T'   // Header tag for serial time sync message
#define TIME_REQUEST  7    // ASCII bell character requests a time sync message 

time_t requestSync();

void processSyncMessage();
void digitalClockDisplay();
void printDigits(int digits);

void digitalClockDisplay(){
    // digital clock display of the time
    Serial.print(hour());
    printDigits(minute());
    printDigits(second());
    Serial.print(" ");
    Serial.print(day());
    Serial.print(" ");
    Serial.print(month());
    Serial.print(" ");
    Serial.print(year()); 
    Serial.println(); 
}

void printDigits(int digits){
    // utility function for digital clock display: prints preceding colon and leading 0
    Serial.print(":");
    if(digits < 10)
        Serial.print('0');
    Serial.print(digits);
}

void processSyncMessage() {
    
    // if time sync available from serial port, update time and return true
    while(Serial.available() >=  TIME_MSG_LEN ){  // time message consists of a header and ten ascii digits
        char c = Serial.read() ; 
        Serial.print(c);  
        if( c == TIME_HEADER ) {       
            time_t pctime = 0;
            for(int i=0; i < TIME_MSG_LEN -1; i++){   
                c = Serial.read();          
                if( c >= '0' && c <= '9'){   
                    pctime = (10 * pctime) + (c - '0') ; // convert digits to a number    
                }
            }   
            setTime(pctime);   // Sync Arduino clock to the time received on the serial port
        }  
    }
}

time_t requestSync()
{
    // TODO: get the time from the RTC
    
    Serial.print(TIME_REQUEST,DEC);  
    return 0; // the time will be sent later in response to serial mesg
}



// The shield uses the I2C SCL and SDA pins. On classic Arduinos
// this is Analog 4 and 5 so you can't use those for analogRead() anymore
// However, you can connect other I2C sensors to the I2C bus and share
// the I2C bus.
Adafruit_RGBLCDShield lcd = Adafruit_RGBLCDShield();



#define LCD_COLUMNS 16
#define LDC_ROWS 2


void setup() {
    // Debugging output
    Serial.begin(9600);

    setSyncProvider( requestSync);  //set function to call when sync required
    Serial.println("Waiting for sync message");

    
    // set up the LCD's number of rows and columns: 
    lcd.begin(LCD_COLUMNS, LDC_ROWS);
    
//    DateTime t = 
    
    // TODO: get the initial time from the RTC
    
    
    // Print a message to the LCD. We track how long it takes since
    // this library has been optimized a bit and we're proud of it :)
    int time = millis();
    lcd.print("Hello, world!");
    time = millis() - time;
    
    Serial.print("\n\n");
    Serial.print("Took "); Serial.print(time); Serial.println(" ms");
    // lcd.setBacklight(BLUE);
    
    lcd.setCursor(0, 1);
    lcd.print("corbin dunn");
}

RTC_DS1307 RTC;

bool g_runClock = false;

//uint8_t i=0;
void loop() {
    // set the cursor to column 0, line 1
    // (note: line 1 is the second row, since counting begins with 0):
 //   lcd.setCursor(0, 1);
//    lcd.setCursor(0, 1);
//    lcd.print("corbin dunn");
    // print the number of seconds since reset:
  //  lcd.print(millis()/1000);
    
    uint8_t buttons = lcd.readButtons();
    
    if (buttons) {
      // lcd.clear();
        lcd.setCursor(0,0);
        if (buttons & BUTTON_UP) {
            lcd.print("UP ");
            //lcd.setBacklight(RED);
        }
        if (buttons & BUTTON_DOWN) {
            lcd.print("DOWN ");
            //lcd.setBacklight(YELLOW);
        }
        if (buttons & BUTTON_LEFT) {
            lcd.print("LEFT ");
            //   lcd.setBacklight(GREEN);
        }
        if (buttons & BUTTON_RIGHT) {
            lcd.print("RIGHT ");
            // lcd.setBacklight(TEAL);
        }
        if (buttons & BUTTON_SELECT) {
            lcd.print("SELECT ");
            //lcd.clear();  
            lcd.blink();
            //lcd.setBacklight(VIOLET);
            g_runClock = g_runClock ? 0 : 1;
            
            Serial.print("runclock:");
            Serial.print(g_runClock               );
            Serial.print("\n\n");
                         
        }
    }
    
    if (g_runClock) {
        // print the time
        DateTime now = RTC.now();
        
        lcd.setCursor(0,0);
        lcd.print(now.month(), DEC);
        lcd.print('/');
        lcd.print(now.day(), DEC);
        lcd.print('/');
        lcd.print(now.year() - 2000, DEC);
        lcd.print(' ');
        lcd.print(now.hour(), DEC);
        lcd.print(':');
        lcd.print(now.minute(), DEC);
        lcd.print(':');
        lcd.print(now.second(), DEC);
        
    }
    
//    if(Serial.available() ) 
//    {
//        processSyncMessage();
//    }
//    if(timeStatus()!= timeNotSet)   
//    {
//        digitalWrite(13,timeStatus() == timeSet); // on if synced, off if needs refresh  
////        digitalClockDisplay();  
//    }
   // delay(1000);    
}